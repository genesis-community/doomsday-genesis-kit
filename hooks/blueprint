#!/bin/bash

################################################################################
# Functions
################################################################################
fail() { echo "$@" >&2 ; exit 1 ; }

bosh::deps() {
  bosh deps --json | jq -r '.Tables[0].Rows[].name'
}

template::render() {
  local template=${1} outfile=${2}

  sed \
    -e "s#{{OCFP_ENV_NAME}}#${OCFP_ENV_NAME}#g" \
    -e "s#{{OCFP_ENV_PATH}}#${OCFP_ENV_PATH}#g" \
    -e "s#{{OCFP_VAULT_PREFIX}}#${OCFP_ENV_VAULT_PREFIX}#g" \
    < "${template}" > "${outfile}"
}

template::render::bosh::credhub() {
  local template="ocfp/templates/credhub.yml"
  local outfile="dynamic/${OCFP_ENV_NAME}-bosh-credhub.yml"

  template::render ${template} ${outfile}

  yamls+=( "${outfile}" )
}

template::render::env::fqdns() {
  local template="ocfp/templates/fqdns.yml"
  local outfile="dynamic/${OCFP_ENV_NAME}-bosh-fqdns.yml"

  fqdns=($({
    safe get ${OCFP_ENV_VAULT_PREFIX}/tf/${OCFP_ENV_PATH}/ocf/fqdns
    safe get ${OCFP_ENV_VAULT_PREFIX}/tf/${OCFP_ENV_PATH}/mgmt/fqdns
    } 2>/dev/null | awk '/: /{print $2}';
  ))

  [[ ${#fqdns[@]} -gt 0 ]] || return 0 # No FQDNs found for env, skipping.

  template::render ${template} ${outfile}

  for fqdn in "${fqdns[@]}" 
  do echo "                  - ${fqdn}" >> "${outfile}"
  done

  yamls+=( "${outfile}" )
}

template::render::env::vault() {
  local template="ocfp/templates/vault.yml"
  local outfile="dynamic/${OCFP_ENV_NAME}-vault.yml"

  template::render ${template} ${outfile}

  yamls+=( "${outfile}" )
}

ocfp::vault::prefix() {
  if want_feature sharded-vault-paths
  then # Madness. Not a best practice. Don't use this feature :p
    OCFP_ENV_VAULT_PREFIX="$(safe get ${GENESIS_SECRETS_MOUNT}/${GENESIS_ENVIRONMENT//-/\/}/doomsday/vault/prefixes:${OCFP_ENV_NAME})"
  else
    OCFP_ENV_VAULT_PREFIX="secret"
  fi
}

################################################################################
# Main
################################################################################
shopt -s nullglob
set -eu

declare feature env_name mgmt_env
declare -a yamls opsfiles ocf_envs fqdns
declare -x OCFP_VAULT_PREFIX OCFP_ENV_NAME OCFP_ENV_PATH OCFP_ENV_VAULT_PREFIX

yamls=()
opsfiles=()
fqdns=()

mkdir dynamic

yamls+=( "manifests/doomsday.yml" )

for feature in ${GENESIS_REQUESTED_FEATURES[@]}
do
  case "${feature}" in
    (ocfp|sharded-vault-paths)
			true
			;;
    (tls|lb|userpass)
			yamls+=( "manifests/addons/${feature}.yml" )
			;;
    (*)
      if [[ -s "$GENESIS_ROOT/ops/${feature}.yml" ]]
      then opsfiles+=( "$GENESIS_ROOT/ops/${feature}.yml" )
      else fail "Feature not found: '${feature}'"
      fi
      ;;
  esac
done

if want_feature ocfp
then
  yamls+=( "ocfp/ocfp.yml" )

  mgmt_env=${GENESIS_ENVIRONMENT} 
  ocf_envs=($(bosh::deps | awk '/-bosh$/' | sed -e 's/-bosh$//'))

  for OCFP_ENV_NAME in ${mgmt_env} "${ocf_envs[@]}"
  do
    OCFP_ENV_PATH=${OCFP_ENV_NAME//-/\/}

    ocfp::vault::prefix

    template::render::env::fqdns
    template::render::bosh::credhub
    template::render::env::vault
  done

fi

for opsfile in "${opsfiles[@]}"
do yamls+=( "$opsfile" )
done

echo ${yamls[@]}
